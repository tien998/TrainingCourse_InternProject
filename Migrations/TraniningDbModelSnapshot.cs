// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TrainingCourse_InternProject.Migrations
{
    [DbContext(typeof(TraniningDb))]
    partial class TraniningDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseFee")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalStudent")
                        .HasColumnType("int");

                    b.Property<string>("TrainingId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("Model.DepartmentPerTraining", b =>
                {
                    b.Property<string>("TrainingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TrainingId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentPerTraining");
                });

            modelBuilder.Entity("Model.Register", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActualFee")
                        .HasColumnType("int");

                    b.Property<int>("DisCount")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("Register");
                });

            modelBuilder.Entity("Model.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("Model.SubjectDepartment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubjectDepartment");
                });

            modelBuilder.Entity("Model.Training", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("Model.TrainingProcess", b =>
                {
                    b.Property<string>("ClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClassId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TrainingProcess");
                });

            modelBuilder.Entity("Model.DepartmentPerTraining", b =>
                {
                    b.HasOne("Model.SubjectDepartment", "_subjectDepartment")
                        .WithMany("_departmentPerTraining")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Training", "_training")
                        .WithMany("_departmentPerTraining")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_subjectDepartment");

                    b.Navigation("_training");
                });

            modelBuilder.Entity("Model.Register", b =>
                {
                    b.HasOne("Model.Class", "_class")
                        .WithMany("_register")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_class");
                });

            modelBuilder.Entity("Model.Subject", b =>
                {
                    b.HasOne("Model.SubjectDepartment", "_subjectDepartment")
                        .WithMany("_subjects")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("_subjectDepartment");
                });

            modelBuilder.Entity("Model.TrainingProcess", b =>
                {
                    b.HasOne("Model.Class", "_class")
                        .WithMany("_trainingProcesses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Subject", "_subject")
                        .WithMany("_trainingProcesses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_class");

                    b.Navigation("_subject");
                });

            modelBuilder.Entity("Model.Class", b =>
                {
                    b.Navigation("_register");

                    b.Navigation("_trainingProcesses");
                });

            modelBuilder.Entity("Model.Subject", b =>
                {
                    b.Navigation("_trainingProcesses");
                });

            modelBuilder.Entity("Model.SubjectDepartment", b =>
                {
                    b.Navigation("_departmentPerTraining");

                    b.Navigation("_subjects");
                });

            modelBuilder.Entity("Model.Training", b =>
                {
                    b.Navigation("_departmentPerTraining");
                });
#pragma warning restore 612, 618
        }
    }
}
